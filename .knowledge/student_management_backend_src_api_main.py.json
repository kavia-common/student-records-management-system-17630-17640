{"is_source_file": true, "format": "Python", "description": "This file defines a REST API for managing student records, including models, endpoints for CRUD operations, in-memory storage, and API configuration using FastAPI framework.", "external_files": ["fastapi", "fastapi.middleware.cors", "pydantic", "typing", "uuid"], "external_methods": ["FastAPI()", "add_middleware()", "HTTPException()", "Query()", "Path()", "status.HTTP_201_CREATED", "uuid.uuid4()"], "published": ["app"], "classes": [{"name": "StudentIn", "description": "Request model for creating/updating a student."}, {"name": "StudentOut", "description": "Response model for student, with unique ID."}, {"name": "StatusResponse", "description": "Status message model."}], "methods": [{"name": "health_check()", "description": "Simple health check.", "scope": "", "scopeKind": ""}, {"name": "get_students( sort_by: Optional[str] = Query(None, description=\"Sort field: name, class, or marks\"), order: Optional[str] = Query(\"asc\", description=\"asc for ascending, desc for descending\"), filter_class: Optional[str] = Query(None, alias=\"class\", description=\"Filter by class/section\"), min_marks: Optional[int] = Query(None, ge=0, le=100, description=\"Filter students with marks >= min_marks\"), max_marks: Optional[int] = Query(None, ge=0, le=100, description=\"Filter students with marks <= max_marks\") )", "description": "Get a list of students, with optional sorting and filtering by class or marks.", "scope": "", "scopeKind": ""}, {"name": "create_student(student: StudentIn)", "description": "Add a new student to the records.", "scope": "", "scopeKind": ""}, {"name": "update_student( student_id: str = Path(..., description=\"ID of the student to update\"), updated: StudentIn = ..., )", "description": "Update an existing student by ID.", "scope": "", "scopeKind": ""}, {"name": "delete_student( student_id: str = Path(..., description=\"ID of the student to delete\") )", "description": "Delete a student by ID.", "scope": "", "scopeKind": ""}, {"name": "get_student_by_id( student_id: str = Path(..., description=\"ID of the student to retrieve\") )", "description": "Get details of a single student by ID.", "scope": "", "scopeKind": ""}, {"name": "strip_and_validate_class(cls, v)", "scope": "StudentIn", "scopeKind": "class", "description": "unavailable"}, {"name": "strip_and_validate_name(cls, v)", "scope": "StudentIn", "scopeKind": "class", "description": "unavailable"}], "calls": ["FastAPI()", "add_middleware()", "Query()", "Path()", "uuid.uuid4()", "students.get()", "students.pop()"], "search-terms": ["FastAPI", "students in-memory storage", "StudentIn", "StudentOut", "CRUD endpoints", "student management API"], "state": 2, "file_id": 2, "knowledge_revision": 10, "git_revision": "e1efe2be15ae036b60b6f77564e24e0c6a61f189", "revision_history": [{"9": "da6afa49a1b090cd6c9441fa742183b8184075bd"}, {"10": "e1efe2be15ae036b60b6f77564e24e0c6a61f189"}], "ctags": [{"_type": "tag", "name": "StatusResponse", "path": "/home/kavia/workspace/code-generation/student-records-management-system-17630-17640/student_management_backend/src/api/main.py", "pattern": "/^class StatusResponse(BaseModel):$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "StudentIn", "path": "/home/kavia/workspace/code-generation/student-records-management-system-17630-17640/student_management_backend/src/api/main.py", "pattern": "/^class StudentIn(BaseModel):$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "StudentOut", "path": "/home/kavia/workspace/code-generation/student-records-management-system-17630-17640/student_management_backend/src/api/main.py", "pattern": "/^class StudentOut(StudentIn):$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "app", "path": "/home/kavia/workspace/code-generation/student-records-management-system-17630-17640/student_management_backend/src/api/main.py", "pattern": "/^app = FastAPI($/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "create_student", "path": "/home/kavia/workspace/code-generation/student-records-management-system-17630-17640/student_management_backend/src/api/main.py", "pattern": "/^def create_student(student: StudentIn):$/", "language": "Python", "kind": "function", "signature": "(student: StudentIn)"}, {"_type": "tag", "name": "data", "path": "/home/kavia/workspace/code-generation/student-records-management-system-17630-17640/student_management_backend/src/api/main.py", "pattern": "/^    data: Optional[Any] = None$/", "language": "Python", "typeref": "typename:Optional[Any]", "kind": "variable", "scope": "StatusResponse", "scopeKind": "class"}, {"_type": "tag", "name": "delete_student", "path": "/home/kavia/workspace/code-generation/student-records-management-system-17630-17640/student_management_backend/src/api/main.py", "pattern": "/^def delete_student($/", "language": "Python", "kind": "function", "signature": "( student_id: str = Path(..., description=\"ID of the student to delete\") )"}, {"_type": "tag", "name": "get_student_by_id", "path": "/home/kavia/workspace/code-generation/student-records-management-system-17630-17640/student_management_backend/src/api/main.py", "pattern": "/^def get_student_by_id($/", "language": "Python", "kind": "function", "signature": "( student_id: str = Path(..., description=\"ID of the student to retrieve\") )"}, {"_type": "tag", "name": "get_students", "path": "/home/kavia/workspace/code-generation/student-records-management-system-17630-17640/student_management_backend/src/api/main.py", "pattern": "/^def get_students($/", "language": "Python", "kind": "function", "signature": "( sort_by: Optional[str] = Query(None, description=\"Sort field: name, class, or marks\"), order: Optional[str] = Query(\"asc\", description=\"asc for ascending, desc for descending\"), filter_class: Optional[str] = Query(None, alias=\"class\", description=\"Filter by class/section\"), min_marks: Optional[int] = Query(None, ge=0, le=100, description=\"Filter students with marks >= min_marks\"), max_marks: Optional[int] = Query(None, ge=0, le=100, description=\"Filter students with marks <= max_marks\") )"}, {"_type": "tag", "name": "health_check", "path": "/home/kavia/workspace/code-generation/student-records-management-system-17630-17640/student_management_backend/src/api/main.py", "pattern": "/^def health_check():$/", "language": "Python", "kind": "function", "signature": "()"}, {"_type": "tag", "name": "id", "path": "/home/kavia/workspace/code-generation/student-records-management-system-17630-17640/student_management_backend/src/api/main.py", "pattern": "/^    id: str = Field(..., description=\"The unique identifier of the student\")$/", "language": "Python", "typeref": "typename:str", "kind": "variable", "scope": "StudentOut", "scopeKind": "class"}, {"_type": "tag", "name": "marks", "path": "/home/kavia/workspace/code-generation/student-records-management-system-17630-17640/student_management_backend/src/api/main.py", "pattern": "/^    marks: int = Field(..., ge=0, le=100, description=\"The marks scored by the student (0-100)\")$/", "language": "Python", "typeref": "typename:int", "kind": "variable", "scope": "StudentIn", "scopeKind": "class"}, {"_type": "tag", "name": "name", "path": "/home/kavia/workspace/code-generation/student-records-management-system-17630-17640/student_management_backend/src/api/main.py", "pattern": "/^    name: str = Field(..., min_length=1, max_length=100, description=\"The full name of the stude/", "language": "Python", "typeref": "typename:str", "kind": "variable", "scope": "StudentIn", "scopeKind": "class"}, {"_type": "tag", "name": "strip_and_validate_class", "path": "/home/kavia/workspace/code-generation/student-records-management-system-17630-17640/student_management_backend/src/api/main.py", "pattern": "/^    def strip_and_validate_class(cls, v):$/", "language": "Python", "kind": "member", "signature": "(cls, v)", "scope": "StudentIn", "scopeKind": "class"}, {"_type": "tag", "name": "strip_and_validate_name", "path": "/home/kavia/workspace/code-generation/student-records-management-system-17630-17640/student_management_backend/src/api/main.py", "pattern": "/^    def strip_and_validate_name(cls, v):$/", "language": "Python", "kind": "member", "signature": "(cls, v)", "scope": "StudentIn", "scopeKind": "class"}, {"_type": "tag", "name": "student_class", "path": "/home/kavia/workspace/code-generation/student-records-management-system-17630-17640/student_management_backend/src/api/main.py", "pattern": "/^    student_class: str = Field(..., min_length=1, max_length=20, description=\"The class or secti/", "language": "Python", "typeref": "typename:str", "kind": "variable", "scope": "StudentIn", "scopeKind": "class"}, {"_type": "tag", "name": "students", "path": "/home/kavia/workspace/code-generation/student-records-management-system-17630-17640/student_management_backend/src/api/main.py", "pattern": "/^students: Dict[str, StudentOut] = {}  # {id: StudentOut}$/", "language": "Python", "typeref": "typename:Dict[str, StudentOut]", "kind": "variable"}, {"_type": "tag", "name": "update_student", "path": "/home/kavia/workspace/code-generation/student-records-management-system-17630-17640/student_management_backend/src/api/main.py", "pattern": "/^def update_student($/", "language": "Python", "kind": "function", "signature": "( student_id: str = Path(..., description=\"ID of the student to update\"), updated: StudentIn = ..., )"}], "hash": "c06826e96d0839173a00899806a32ff8", "format-version": 4, "code-base-name": "student_management_backend", "filename": "student_management_backend/src/api/main.py", "fields": [{"name": "app = FastAPI(", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "Optional[Any] data", "scope": "StatusResponse", "scopeKind": "class", "description": "unavailable"}, {"name": "str id", "scope": "StudentOut", "scopeKind": "class", "description": "unavailable"}, {"name": "int marks", "scope": "StudentIn", "scopeKind": "class", "description": "unavailable"}, {"name": "str name", "scope": "StudentIn", "scopeKind": "class", "description": "unavailable"}, {"name": "str student_class", "scope": "StudentIn", "scopeKind": "class", "description": "unavailable"}, {"name": "Dict[str, StudentOut] students", "scope": "", "scopeKind": "", "description": "unavailable"}]}